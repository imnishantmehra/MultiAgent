from crewai import Task
# from tools import pdf_tool
# import tools
from tools import file_extraction_tool, linkedin_post_tool, instagram_post_tool, facebook_post_tool, twitter_post_tool, wordpress_post_tool, PLATFORM_LIMITS
from agents import script_research_agent, qc_agent, script_rewriter_agent , linkedin_agent, instagram_agent, facebook_agent, twitter_agent, wordpress_agent, regenrate_content_agent, regenrate_subcontent_agent, youtube_agent, tiktok_agent
# from main import PLATFORM_LIMITS


script_research_task = Task(
    description=(
        "1. Analyze the provided 'text' content to determine which type of content is most prominent "
        "(choose only ONE from: wisdom, quotes, or ideas).\n"
        "2. Extract ONLY the chosen type of content.\n"
        "3. Process the content for week {week} and day {day}.\n"
        "4. Return the extracted content in a structured format.\n"
        "5. Extract the content on the basis of week and divide it into subcontents on the basis of days.\n"
        "6. Generate the subcontents on the basis of given days only which is provided in the input.\n"
    ),
    expected_output=(
        "A object containing the extracted content divided by weeks and days. "
        "Week always contain the week number."
        "Dont generate metadata before the week."
        "Here is an example of the expected output format:"
        "week : content (A line defining the content.)\n"
        "  day : subcontent(generated from content of the week.)\n"
        "  day : subcontent(generated from content of the week.)\n"
        "first agent will chose the content type and then extract the content based on the content type."
        "first the content extracted on the basis of week will show in front of week "
        "then the subcontents will be generated on the basis of days which is divided from week content. only one subcontent in a day."
        "Each week will include maximum 6 daily entries, give only one subcontent for choosen day in output, each entry containing bullet points with brief explanations."
        "Remark never give subcontents for the days which are not provided in the input."
        "The output should be free of unnecessary metadata, bullet points, or other formatting."
    ),
    tools=[],
    agent=script_research_agent,
)



qc_task = Task(
    description=(
        "Review the scripts generated by the Script Researcher and Script Writer with a focus on the following:\n"
        " - Strict adherence to quality standards, including prohibition of forbidden words and phrases.\n"
        " - Compliance with mandatory tone and style guidelines (neutral, factual, and professional).\n"
        " - Ensuring content is plagiarism-free and adheres to the company's policy on clear and concise communication.\n"
        "\nThe review process must:\n"
        "1. Identify and flag any usage of forbidden words or phrases.\n"
        "2. Ensure the content's tone and style align with guidelines.\n"
        "3. Highlight any areas requiring revision, with specific corrective instructions.\n"
        "4. Provide clear feedback to the Script Writer for immediate revision.\n"
        "\nExpected Output:\n"
        " - A validation report that includes:\n"
        "   * Identified issues with specific references to flagged words or phrases.\n"
        "   * Recommendations for corrections or rewrites.\n"
        "   * A final decision to either approve or reject the script."
    ),
    expected_output=(
        "A comprehensive QC validation report, listing identified issues, feedback for corrections, and a final verdict "
        "on whether the content is approved or rejected. The report must include specific points where content deviates from "
        "guidelines and provide actionable recommendations."
        "cleaned_content : The content after removing the forbidden words and phrases."
        "cleaned_content will pass to next agent for further processing."
        "have to pass the content to the next agent after removing the forbidden words and phrases.Make it a proper script and well sctructure format , in that I get a final output as script."
        "The output should be free of unnecessary metadata, bullet points, or other formatting."
    ),
    tools=[],  # Add relevant tools for automated checks, if needed
    agent=qc_agent,
)

script_rewriter_task = Task(
    description="""Generate an improved version of the content following the platform's natural format:

    Platform Style Guidelines:
    Instagram: Engaging captions, emojis, spaced paragraphs, 3-5 hashtags, call-to-action.Make sure to keep the character and word limit for instagram.
    LinkedIn: Professional hook, insights, clean formatting, thought-provoking close, 2-3 hashtags.Make sure to keep the character and word limit for linkedin.
    Twitter: Concise message within 280 chars, 1-2 hashtags.Make sure to keep the character and word limit for Twitter.
    Facebook: Conversational style, story elements, emoticons, engagement prompt.Make sure to keep the character and word limit for facebook.
    WordPress: Blog structure with headers, intro, body, conclusion.Make sure to keep the character and word limit for wordpress.
    Youtube: A detailed post which further gives to tools for image or video genration which is ready to upload in youtube.
    TikTok: A detailed post which further gives to tools for image or video genration which is ready to upload in tiktok.

    Output the content directly in the appropriate style without platform labels or section markers. The content should flow naturally while following platform conventions.""",
    expected_output="""A naturally formatted script that seamlessly incorporates the platform's style requirements while improving the content quality and engagement potential.""",
    agent=script_rewriter_agent,
    tools=[]
)


linkedin_task = Task(
    description=f"""Transform input content into an engaging LinkedIn post by:
        1. Analyzing the core message and target audience
        2. Restructuring for maximum impact (within {PLATFORM_LIMITS['linkedin']['words']} words)
        3. Adding professional context and insights
        4. Optimizing formatting for LinkedIn's platform
        5. Including relevant hashtags and calls-to-action
        6. Automatically generates the hashtags , emojis and any other formatting depending upon the post""",
    expected_output="""A polished LinkedIn post ready for publishing.
                    genrate hashtags , emojies and other extra details which is used in linkedin posts""",
    agent=linkedin_agent,
    tools=[],
)

instagram_task = Task(
    description=f"""Create engaging Instagram captions by:
        1. Crafting attention-grabbing first lines
        2. Structuring content for {PLATFORM_LIMITS['instagram']['words']}-word limit
        3. Adding strategic emoji placement
        4. Including relevant hashtags (3-5)
        5. Creating strong calls-to-action
        6. Automatically generating hashtags, emojis, and formatting based on the post context""",
    expected_output="""An engaging Instagram caption with strategic formatting and hashtags.
                    The content should be well structured and formatted as a post.
                    genrate hashtags , emojies and other extra details which is used in linkedin posts""",
    agent=instagram_agent,
    tools=[]
)

facebook_task = Task(
    description=f"""Develop engaging Facebook content by:
        1. Creating relatable opening hooks
        2. Structuring content within {PLATFORM_LIMITS['facebook']['words']} words
        3. Adding conversation starters
        4. Including share-worthy elements
        5. Optimizing for community engagement
        6. Automatically generates the hashtags , emojis and any other formatting depending upon the post""",
    expected_output="""An engaging Facebook post optimized for sharing and discussion.
                    genrate hashtags , emojies and other extra details which is used in linkedin posts""",
    agent=facebook_agent,
    tools=[]
)

twitter_task = Task(
    description=f"""Transform input content into engaging tweets by:
        1. Identifying key messages for {PLATFORM_LIMITS['twitter']['chars']}-character format
        2. Creating scroll-stopping opening lines
        3. Adding relevant hashtags and mentions
        4. Optimizing for retweets and engagement
        5. Threading longer content effectively
        6. Automatically generates the hashtags , emojis and any other formatting depending upon the post""",
    expected_output="""A set of engaging tweets ready for posting."
                    The content should be well structured, complete and formatted as a tweet."
                    genrate hashtags , emojies and other extra details which is used in linkedin posts""",
    agent=twitter_agent,
    tools=[]
)


wordpress_task = Task(
    description=f"""Create comprehensive blog content by:
        1. Developing clear article structure
        2. Writing within {PLATFORM_LIMITS['wordpress']['words']}-word guideline
        3. Optimizing for search engines
        4. Including relevant internal/external links
        5. Creating compelling calls-to-action
        6. Ensuring readability and SEO optimization
        7. Automatically generates the hashtags , emojis and any other formatting depending upon the post""",
    expected_output="""A well-structured, SEO-optimized blog post ready for publishing.
                    genrate hashtags , emojies and other extra details which is used in linkedin posts""",
    agent=wordpress_agent,
    tools=[]
)


youtube_task = Task(
    description=f"""Create a YouTube video script that:
        1. Starts with a powerful hook to grab attention
        2. Maintains high engagement throughout the video
        3. Includes timestamps for different sections
        4. Optimizes content for YouTubeâ€™s algorithm
        5. Provides clear visual and audio cues for AI-generated video creation
        6. Ends with a strong CTA to drive actions like subscribing or visiting a link
        7. Ensures readability and natural flow of speech
        8. Generates hashtags, emojis, and captions for YouTube metadata""",
    expected_output="""A YouTube-ready video script structured for easy AI video generation, including timestamps, visual cues, and a compelling narrative.""",
    agent=youtube_agent,
    tools=[]
)



tiktok_task = Task(
    description=f"""Create a TikTok video script that:
        1. Hooks the audience in the first 3 seconds
        2. Aligns with current TikTok trends and challenges
        3. Includes visual, motion, and audio effects cues
        4. Is formatted for easy AI-generated video creation
        5. Uses short, impactful storytelling for maximum retention
        6. Ends with a powerful CTA (Follow, Like, Comment, Share)
        7. Generates hashtags, captions, and emoji-based highlights""",
    expected_output="""A TikTok-ready short video script with trending elements, scene cues, and engagement-driven storytelling, optimized for AI-generated video creation.""",
    agent=tiktok_agent,
    tools=[]
)


regenrate_content_task = Task(
    description="""Regenrate the weekly content according to the given input.""",
    expected_output="""An object containing the regenerated content of  weeks .
    if weekly content provided only generated the week content.
    Here is an example of the expected output format:
    week : regenrated content (new content and if content is regenrated then subcontent will also be regenrated.)
    Generate only one content.
    NOTE: Don't generate the subcontent if the content is regenrated.
    here is an e.g. of how i want the output :
         "week: Embrace Change: The winds of change may be unsettling at first, but they often bring the seeds of growth and transformation.""""",
    agent=regenrate_content_agent,
    tools=[],
)


regenrate_subcontent_task = Task(
    description="""Regenerate the subcontent according to the given input. """,
    expected_output="""An object containing the regenerated subcontent of the day .
    if day subcontent provided only generated the day subcontent.
    Here is an example of the expected output format:
    day : regenrated subcontent (new subcontent and if subcontent is regenrated then content will not be regenrated.)
    Generate only one subcontent.
    NOTE: Don't generate the content if the subcontent is regenrated.
    here is an e.g. of how i want the output :
         "day: Embrace Change: The winds of change may be unsettling at first, but they often bring the seeds of growth and transformation.""""",
    agent=regenrate_subcontent_agent,
    tools=[],
)